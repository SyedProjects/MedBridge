rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserDoc(userId) {
      return request.auth.uid == userId;
    }

    function isDoctor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'doctor';
    }

    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isUserDoc(userId);
      allow update: if isAuthenticated() && isUserDoc(userId);
      allow delete: if false; // Don't allow user deletion through client
    }

    // Sessions
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && (
        resource.data.doctorId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      
      allow create: if isAuthenticated() && isStudent() && 
        request.resource.data.studentId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        // Doctor can update status
        (isDoctor() && resource.data.doctorId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])) ||
        // Student can cancel their own pending sessions
        (isStudent() && resource.data.studentId == request.auth.uid && 
         resource.data.status == 'pending' && 
         request.resource.data.status == 'cancelled')
      );
      
      allow delete: if false; // Don't allow session deletion
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 